{"version":3,"file":"static/js/642.c43523e9.chunk.js","mappings":"6NAmDA,UA5CoB,WAClB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,sGAEjBJ,GAAa,GAFI,UAGSK,EAAAA,EAAAA,IAAkBX,GAH3B,gBAGTY,EAHS,EAGTA,QACRR,EAAWQ,GACXN,GAAa,GALI,kDAOjBE,EAAS,KAAMK,SACfC,EAAAA,GAAAA,MAAA,+CARiB,yBAUjBR,GAAa,GAVI,6EAAH,qDAalBI,GACD,GAAE,CAACV,IAEsB,IAAnBG,EAAQY,QACb,eAAIC,UAAWC,EAAAA,EAAAA,UAAf,SAA8B,+CAE9B,iBAAKD,UAAWC,EAAAA,EAAAA,qBAAhB,WACE,eAAID,UAAWC,EAAAA,EAAAA,aAAf,SAAiC,aACjC,eAAID,UAAWC,EAAAA,EAAAA,YAAf,SACGd,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,gBAAaL,UAAWC,EAAAA,EAAAA,YAAxB,WACE,iBAAMD,UAAWC,EAAAA,EAAAA,aAAjB,SAAmC,YAAc,IAAEG,GACnD,cAAGJ,UAAWC,EAAAA,EAAAA,YAAd,SAAgCI,MAFzBF,EADE,MAOdZ,IACC,eAAGS,UAAU,eAAb,UAA4B,iCAA+BT,KAE5DF,IAAa,SAAC,IAAD,MAGnB,C","sources":["pages/ReviewsPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport css from './Page.module.css';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/api';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader';\n\nconst ReviewsPage = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await fetchMovieReviews(movieId);\n        setReviews(results);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error.message);\n        toast.error(`Error fetching movie details: ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return reviews.length === 0 ? (\n    <h3 className={css.textError}>We don't have any reviews for this movie.</h3>\n  ) : (\n    <div className={css.reviewsPageContainer}>\n      <h2 className={css.reviewsTitle}>Reviews</h2>\n      <ul className={css.reviewsList}>\n        {reviews.map(({ id, author, content }) => (\n          <li key={id} className={css.reviewsItem}>\n            <span className={css.reviewsAutor}>Author:</span> {author}\n            <p className={css.reviewsText}>{content}</p>\n          </li>\n        ))}\n      </ul>\n      {error && (\n        <p className=\"errorMessage\">Whoops, something went wrong: {error}</p>\n      )}\n      {isLoading && <Loader />}\n    </div>\n  );\n};\n\nexport default ReviewsPage;"],"names":["movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useEffect","fetchReviews","fetchMovieReviews","results","message","toast","length","className","css","map","id","author","content"],"sourceRoot":""}